#include "generics/Hash.h"
#include "Table.h"

namespace Loader {
  constexpr size_t TEXTURE_SAMPLE_MODE_KEY = gnx::Hash::constHash("SampleMode");
  constexpr size_t TEXTURE_SAMPLE_MODE_SNAP_KEY = gnx::Hash::constHash("SnapToNearest");
  constexpr size_t TEXTURE_SAMPLE_MODE_LINEAR_KEY = gnx::Hash::constHash("LinearInterpolation");
  enum class TextureSampleMode : uint8_t {
    SnapToNearest,
    LinearInterpolation
  };

  enum class TextureFormat : uint8_t {
    RGBA
  };

  //Texture takes from the linked image to the "color" property of a material
  struct TextureAsset {
    auto operator<=>(const TextureAsset&) const = default;

    //w/h come from the linked image automatically
    size_t width{};
    size_t height{};
    //Populated from a custom property "SampleMode" on the material with values corresponding to the enum
    TextureSampleMode sampleMode{};
    //TODO:
    TextureFormat format{};
    std::vector<uint8_t> buffer;
  };

  //Generated by the material assigned to a node in blender
  struct MaterialAsset {
    auto operator<=>(const MaterialAsset&) const = default;

    TextureAsset texture;
  };

  struct MaterialAssetRow : Row<MaterialAsset> {};
}

namespace std {
  template<>
  struct hash<Loader::TextureAsset> {
    size_t operator()(const Loader::TextureAsset& v) const;
  };

  template<>
  struct hash<Loader::MaterialAsset> {
    size_t operator()(const Loader::MaterialAsset& v) const;
  };
}