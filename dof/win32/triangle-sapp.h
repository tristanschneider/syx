#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input C:/syx/dof/win32/triangle-sapp.glsl --output C:/syx/dof/win32/triangle-sapp.h --slang glsl430

    Overview:
    =========
    Shader program: 'triangle':
        Get shader desc: triangle_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_triangle_position => 0
            ATTR_triangle_uv => 1
    Bindings:
        Uniform block 'params':
            C struct: params_t
            Bind slot: UB_params => 0
        Storage buffer 'buff':
            C struct: buff_t
            Bind slot: SBUF_buff => 0
        Image 'tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_tex => 0
        Sampler 'sam':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_sam => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before triangle-sapp.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_triangle_position (0)
#define ATTR_triangle_uv (1)
#define UB_params (0)
#define SBUF_buff (0)
#define IMG_tex (0)
#define SMP_sam (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct params_t {
    float tUniform[2];
    uint8_t _pad_8[8];
} params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(8) typedef struct BufferData_t {
    float pos[2];
} BufferData_t;
#pragma pack(pop)
/*
    #version 430

    struct BufferData
    {
        vec2 pos;
    };

    layout(binding = 0, std430) readonly buffer buff
    {
        BufferData data[];
    } _24;

    uniform vec4 params[1];
    layout(location = 0) in vec4 position;
    layout(location = 0) out vec2 fragUV;
    layout(location = 1) in vec2 uv;

    void main()
    {
        gl_Position = position + vec4(_24.data[0].pos, 0.0, 0.0);
        gl_Position.x = fma(float(gl_InstanceID), 0.5, gl_Position.x);
        fragUV = uv + params[0].xy;
    }

*/
static const uint8_t vs_source_glsl430[448] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x42,0x75,0x66,0x66,0x65,0x72,0x44,0x61,0x74,0x61,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,
    0x6e,0x67,0x20,0x3d,0x20,0x30,0x2c,0x20,0x73,0x74,0x64,0x34,0x33,0x30,0x29,0x20,
    0x72,0x65,0x61,0x64,0x6f,0x6e,0x6c,0x79,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,
    0x62,0x75,0x66,0x66,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x42,0x75,0x66,0x66,0x65,
    0x72,0x44,0x61,0x74,0x61,0x20,0x64,0x61,0x74,0x61,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,
    0x5f,0x32,0x34,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,
    0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x34,
    0x2e,0x64,0x61,0x74,0x61,0x5b,0x30,0x5d,0x2e,0x70,0x6f,0x73,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x20,0x3d,0x20,0x66,0x6d,0x61,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,
    0x63,0x65,0x49,0x44,0x29,0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x3d,0x20,0x75,0x76,0x20,0x2b,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 430

    layout(binding = 16) uniform sampler2D tex_sam;

    layout(location = 0) out vec4 frag_color;
    layout(location = 0) in vec2 fragUV;

    void main()
    {
        frag_color = texture(tex_sam, fragUV);
    }

*/
static const uint8_t fs_source_glsl430[204] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x31,
    0x36,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x2c,0x20,0x66,
    0x72,0x61,0x67,0x55,0x56,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* triangle_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "position";
            desc.attrs[1].glsl_name = "uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "params";
            desc.storage_buffers[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.storage_buffers[0].readonly = true;
            desc.storage_buffers[0].glsl_binding_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "tex_sam";
            desc.label = "triangle_shader";
        }
        return &desc;
    }
    return 0;
}
